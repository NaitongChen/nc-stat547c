setwd("C:/2020W1/STAT547C/nc-stat547c/src")
0.5*exp(1)*sqrt(pi)*erfc(1)
0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
n=5
(hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4)))+1
hp_norm = 3*sqrt(1.5)/16
(hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4)))+1
# set parameters
p = 1
d = 5
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
(hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4)))+1
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4)))
+1
val
setwd("C:/2020W1/STAT560/Assignment3")
# Q6(a)
# load data
dat = read.csv("NormalMixture1.data", FALSE, " ")
dat = array(t(dat))
mu1 = 4
mu2 = 8
mu3 = 12
n = length(dat)
# init with equal probabilities
ps = c(1/3, 1/3, 1/3)
# function that computes tilde p ij
tp_ij <- function(y, pks){
denom = dnorm(y, mu1, 1) * pks[1] + dnorm(y, mu2, 1) * pks[2] +
dnorm(y, mu3, 1) * pks[3]
tp_i1 = dnorm(y, mu1, 1) * pks[1] / denom
tp_i2 = dnorm(y, mu2, 1) * pks[2] / denom
tp_i3 = dnorm(y, mu3, 1) * pks[3] / denom
return(c(tp_i1, tp_i2, tp_i3))
}
stop = FALSE
while(!stop){
newps = c(0,0,0)
for(i in 1:n){
newps = newps + tp_ij(dat[i], ps)
}
newps = newps / n
if(norm(matrix(newps - ps), "F") < 1e-6){
stop = TRUE
}
ps = newps
}
print(ps) # 0.3511889 0.3876204 0.2611906
# Q6(a)
# load data
dat = read.csv("NormalMixture1.data", FALSE, " ")
dat = array(t(dat))
mu1 = 4
mu2 = 8
mu3 = 12
n = length(dat)
# init with equal probabilities
ps = c(1/3, 1/3, 1/3)
# function that computes tilde p ij
tp_ij <- function(y, pks){
denom = dnorm(y, mu1, 1) * pks[1] + dnorm(y, mu2, 1) * pks[2] + dnorm(y, mu3, 1) * pks[3]
tp_i1 = dnorm(y, mu1, 1) * pks[1] / denom
tp_i2 = dnorm(y, mu2, 1) * pks[2] / denom
tp_i3 = dnorm(y, mu3, 1) * pks[3] / denom
return(c(tp_i1, tp_i2, tp_i3))
}
stop = FALSE
while(!stop){
newps = c(0,0,0)
for(i in 1:n){
newps = newps + tp_ij(dat[i], ps)
}
newps = newps / n
if(norm(matrix(newps - ps), "F") < 1e-6){
stop = TRUE
}
ps = newps
}
print(ps) # 0.3511889 0.3876204 0.2611906
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4)))+
1
val
d==1
(d==1)+1
(d==1)+3
(d==1)*5
(d != 1 or p != 1)
(d != 1 || p != 1)
setwd("C:/2020W1/STAT547C/nc-stat547c/src")
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 5
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*((gamma((n*d+1)/p))/(gamma(n*d/p))) +
(p/(n*d))^(2/p)*((gamma((n*d+2)/p))/(gamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
}
bound(10)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 5
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*((gamma((n*d+1)/p))/(gamma(n*d/p))) +
(p/(n*d))^(2/p)*((gamma((n*d+2)/p))/(gamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound(10)
bound(100)
bound(100)
bound(5)
bound(1)
bound(2)
bound(3)
bound(4)
bound(5)
bound(6)
bound(7)
bound(8)
bound(9)
bound(10)
bound(11)
bound(12)
bound(13)
bound(20)
bound(40)
bound(30)
bound(31)
bound(32)
bound(33)
bound(34)
n=34
(hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4)))
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*((gamma((n*d+1)/p))/(gamma(n*d/p))) +
(p/(n*d))^(2/p)*((gamma((n*d+2)/p))/(gamma((n*d)/p))))
gamma((n*d+1)/p))
gamma((n*d+1)/p)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*((gamma((n*d+1)/p))/(gamma(n*d/p))) +
(p/(n*d))^(2/p)*((gamma((n*d+2)/p))/(gamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound(1000)
bound(10)
bound(100)
bound(80)
gamma((80*d+1)/p)
gamma(170)
gamma(175)
lgamma(1)
lgamma(100000)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (gamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(gamma((n*d+2)/p)) - (gamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound(100)
bound(10)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (lgamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(gamma((n*d+2)/p)) - (lgamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound(100)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (lgamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(lgamma((n*d+2)/p)) - (lgamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound(100)
bound(70)
bound(60)
bound(1)
bound(100)
bound(54)
bound(50)
bound(30)
bound(20)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (lgamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(lgamma((n*d+2)/p)) - (lgamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
bound1 <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (lgamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(lgamma((n*d+2)/p)) - (lgamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (lgamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(lgamma((n*d+2)/p)) - (lgamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound1 <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*((gamma((n*d+1)/p)) / (gamma(n*d/p))) +
(p/(n*d))^(2/p)*((gamma((n*d+2)/p)) / (gamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound(1)
########################################
# Normal Approximation of
# Gamma MLE on scale given shape
########################################
# set parameters
p = 1
d = 2
theta0 = 2
# function h (section 3.3.3 in Anastasiou and Ley)
h <- function(x){
return(1/(x^2 + 2))
}
h_norm = 0.5
hp_norm = 3*sqrt(1.5)/16
E_hz = 0.5*exp(1)*sqrt(pi)*2*pnorm(-sqrt(2)*1)
# function that computes the bound (eq 3.2 in Anastasiou and Ley)
bound <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*(exp(lgamma((n*d+1)/p)) - (lgamma(n*d/p))) +
(p/(n*d))^(2/p)*(exp(lgamma((n*d+2)/p)) - (lgamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
bound1 <- function(n){
val = (hp_norm/sqrt(n))*(2+(3+6*(p/d)^(3/4))) +
(d != 1 || p != 1)*(1-2*(p/(n*d))^(1/p)*((gamma((n*d+1)/p)) / (gamma(n*d/p))) +
(p/(n*d))^(2/p)*((gamma((n*d+2)/p)) / (gamma((n*d)/p)))) *
(8*h_norm + (hp_norm*sqrt(n*d*p)*abs(p-1))/2 * ((p<2)/(2^(p-2)) + (p>=2)*(3/2)^(p-2)))
return(val)
}
a
x
??
??
